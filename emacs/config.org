#+TITLE: My Emacs Configuration
#+AUTHOR: Raayan Dhar
#+STARTUP: showeverything
#+OPTIONS: toc:nil

* Package Management
#+begin_src emacs-lisp
;; Bootstrap straight.el
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el"
                         user-emacs-directory))
      (bootstrap-version 6))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

;; Integrate straight.el with use-package
(straight-use-package 'use-package)
(setq straight-use-package-by-default t)
#+end_src

* CUDA
#+begin_src emacs-lisp
(require 'treesit)

;; --- Define CUDA mode (inherits C++) ---
(define-derived-mode cuda-ts-mode c++-ts-mode "CUDA[ts]"
  "Major mode for CUDA using Tree-sitter (inherits C++ config)."
  ;; Create CUDA parser if grammar is available.
  (when (treesit-ready-p 'cuda)
    (treesit-parser-create 'cuda)
    (treesit-major-mode-setup)))

;; --- Tree-sitter auto setup ---
(use-package treesit-auto
  :custom
  (treesit-auto-install t)
  :config
  ;; Register CUDA grammar
  (add-to-list 'treesit-auto-recipe-list
               (make-treesit-auto-recipe
                :lang 'cuda
                :ts-mode 'cuda-ts-mode
                :url "https://github.com/tree-sitter-grammars/tree-sitter-cuda"
                :ext "\\.cu\\'\\|\\.cuh\\'"))
  (treesit-auto-add-to-auto-mode-alist 'all)
  (global-treesit-auto-mode 1))

;; Ensure CUDA files use cuda-ts-mode
(add-to-list 'auto-mode-alist '("\\.cu\\'"  . cuda-ts-mode))
(add-to-list 'auto-mode-alist '("\\.cuh\\'" . cuda-ts-mode))

;; Indentation, modeline, misc
(defun my/cuda-setup ()
  ;; Indent with C treesitter indent if available; otherwise a sane fallback
  (setq-local indent-tabs-mode nil)
  (cond
   ((fboundp 'c-ts-mode-indent-line)
    (setq-local indent-line-function #'c-ts-mode-indent-line))
   ((fboundp 'c-ts-mode--indent-line) ;; older internals
    (setq-local indent-line-function #'c-ts-mode--indent-line))
   (t
    (setq-local indent-line-function #'c-indent-line-or-region)))
  ;; lsp-eldoc off (we'll use lsp-ui tooltip instead)
  (eldoc-mode -1)
  ;; Force modeline to say CUDA[ts] *after* c++-ts-mode tweaks it
  (setq-local mode-name "CUDA[ts]")
  (run-at-time 0 nil (lambda () (setq-local mode-name "CUDA[ts]"))))

(add-hook 'cuda-ts-mode-hook #'my/cuda-setup)

;; LSP integration (use clangd as C++)
(with-eval-after-load 'lsp-mode
  (add-to-list 'lsp-language-id-configuration '(cuda-ts-mode . "cpp"))
  (lsp-register-client
   (make-lsp-client
    :new-connection (lsp-stdio-connection "clangd")
    :activation-fn (lsp-activate-on "cpp")
    :major-modes '(cuda-ts-mode)
    :server-id 'clangd-cuda))
  ;; Stop clangd from inserting includes on completion (e.g. __clang_cuda_runtime_wrapper.h)
  (setq lsp-completion-enable-additional-text-edit nil
        lsp-eldoc-enable-hover nil
        lsp-signature-auto-activate nil
        lsp-signature-render-documentation nil))

(add-hook 'cuda-ts-mode-hook #'lsp-deferred)
(add-hook 'cuda-ts-mode-hook #'yas-minor-mode)
(add-hook 'cuda-ts-mode-hook #'projectile-mode)

;; Format on save via clang-format
(defun my/cuda-format-on-save ()
  (when (derived-mode-p 'cuda-ts-mode)
    (clang-format-buffer)))
(add-hook 'before-save-hook #'my/cuda-format-on-save)

;; CUDA keywords highlighting
(font-lock-add-keywords 'cuda-ts-mode
  '(("__global__"   . font-lock-keyword-face)
    ("__device__"   . font-lock-keyword-face)
    ("__host__"     . font-lock-keyword-face)
    ("__shared__"   . font-lock-keyword-face)
    ("__constant__" . font-lock-keyword-face)))

;; Register grammars so M-x treesit-install-language-grammar finds them
(with-eval-after-load 'treesit
  (dolist (lang '((cuda "https://github.com/tree-sitter-grammars/tree-sitter-cuda")
                  (c    "https://github.com/tree-sitter/tree-sitter-c")
                  (cpp  "https://github.com/tree-sitter/tree-sitter-cpp")))
    (add-to-list 'treesit-language-source-alist lang)))

;; LSP-UI tooltip docs (and no minibuffer spam)
(use-package lsp-ui
  :after lsp-mode
  :hook (lsp-mode . lsp-ui-mode)
  :custom
  (lsp-ui-doc-enable t)
  (lsp-ui-doc-show-with-cursor t)
  (lsp-ui-doc-show-with-mouse nil))
#+end_src


* Appearance and Theme
#+begin_src emacs-lisp
;; Load your custom theme from the themes folder.
(add-to-list 'custom-theme-load-path (expand-file-name "themes" user-emacs-directory))
(load-theme 'custom-dark t)

;; Disable menu, toolbar, and scrollbars for a minimal UI.
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)

;; Set the default font size.
(set-face-attribute 'default nil :height 100)
;; Global absolute line numbers:
(global-display-line-numbers-mode 1)
(setq display-line-numbers-type t)  ;; Use absolute numbers, not relative.
(column-number-mode 1)

;; Set transparency (alpha 95% opaque).
(set-frame-parameter (selected-frame) 'alpha '(95 . 95))
(add-to-list 'default-frame-alist '(alpha . (95 . 95)))
#+end_src

* Completion System (Vertico + Consult + Marginalia + Embark)
#+begin_src emacs-lisp
;; Vertico: minimal completion UI
(use-package vertico
  :init
  (vertico-mode))

;; Save minibuffer history across sessions
(use-package savehist
  :init
  (savehist-mode))

;; Marginalia: richer minibuffer annotations
(use-package marginalia
  :after vertico
  :init
  (marginalia-mode))

;; Consult: commands built on completion
(use-package consult
  :bind (("C-M-s" . consult-line)           ;; search buffer
         ("C-x b" . consult-buffer)       ;; switch buffer
         ("M-y" . consult-yank-pop)       ;; browse kill-ring
         ("C-x C-r" . consult-recent-file)
         ("C-c f" . consult-find)))     ;; find files

;; Embark: context-sensitive actions
(use-package embark
  :bind (("C-." . embark-act)         ;; act on thing at point
         ("C-;" . embark-dwim)        ;; smarter default action
         ("C-h B" . embark-bindings)) ;; list keybindings
  :init
  (setq prefix-help-command #'embark-prefix-help-command))

;; Optional: consult integration with embark
(use-package embark-consult
  :after (embark consult)
  :demand t)
#+end_src

* Productivity & Dev Utilities
#+begin_src emacs-lisp
;; crux: collection of useful commands
(use-package crux
  :bind (("C-c o" . crux-open-with)               ;; open file externally
         ("C-c d" . crux-duplicate-current-line-or-region)
         ("C-c k" . crux-kill-other-buffers)
         ("C-c f" . crux-recentf-find-file)))     ;; recent files

;; expand-region: grow/shrink selection semantically
(use-package expand-region
  :bind (("C-=" . er/expand-region)
         ("C--" . er/contract-region)))

;; multiple-cursors: edit multiple places simultaneously
(use-package multiple-cursors
  :bind (("C-S-c C-S-c" . mc/edit-lines)
         ("C->" . mc/mark-next-like-this)
         ("C-<" . mc/mark-previous-like-this)
         ("C-c C-<" . mc/mark-all-like-this)))

;; quickrun: quickly execute code snippets/files
(use-package quickrun
  :bind (("C-c r" . quickrun)))  ;; reuses your run binding

;; dumb-jump: jump to definitions using ripgrep
(use-package dumb-jump
  :bind (("M-g o" . dumb-jump-go-other-window)
         ("M-g j" . dumb-jump-go)
         ("M-g b" . dumb-jump-back)
         ("M-g q" . dumb-jump-quick-look))
  :config
  (setq dumb-jump-prefer-searcher 'rg))

;; deadgrep: project-wide ripgrep search
(use-package deadgrep
  :bind (("C-c s" . deadgrep)))

;; vterm: full-featured terminal emulator inside Emacs
(use-package vterm
  :commands vterm
  :config
  (setq vterm-shell "/bin/bash")   ;; or zsh/fish if you prefer
  (setq vterm-max-scrollback 10000))

;; vlf: view/edit large files in chunks
(use-package vlf
  :config
  (require 'vlf-setup))
#+end_src


* Org Mode Enhancements
#+begin_src emacs-lisp
(setq org-startup-indented t
      org-return-follows-link t)

(use-package org-bullets
  :hook (org-mode . org-bullets-mode))

(use-package toc-org
  :commands toc-org-enable
  :init (add-hook 'org-mode-hook 'toc-org-enable))

(require 'org-tempo)

;; Enhanced Org-mode settings for math and images.
(setq org-html-with-latex 'mathjax)
(setq org-html-mathjax-options
      '((path "https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js")
        (scale "1")
        (align "center")
        (indent "2em")
        (tags "ams")
        (locales "en")
        (fast-preview "false")))
(setq org-image-actual-width nil)
;; Enable live preview of LaTeX fragments.
(use-package org-fragtog
  :hook (org-mode . org-fragtog-mode))
#+end_src

* LaTeX Editing (AUCTeX + PDF Tools)
#+begin_src emacs-lisp
(use-package auctex)
(setq TeX-auto-save t
      TeX-parse-self t
      TeX-command-default "LatexMk"
      LaTeX-command "latex -shell-escape")

;; Disable special fontification of scripts (superscripts/subscripts) so they match main text.
(setq font-latex-fontify-script nil)

(use-package pdf-tools
  :config
  (pdf-tools-install))

(setq TeX-view-program-selection '((output-pdf "PDF Tools"))
      TeX-source-correlate-start-server t)
(setq TeX-view-program-list '(("PDF Tools" TeX-pdf-tools-sync-view)))
(add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)
(add-hook 'TeX-mode-hook (lambda () (define-key TeX-mode-map (kbd "RET") 'TeX-view)))
(add-hook 'doc-view-mode-hook 'auto-revert-mode)
(add-hook 'pdf-view-mode-hook (lambda () (display-line-numbers-mode -1)))
#+end_src

* Python Development
#+begin_src emacs-lisp
  ;;;; Python Development

  ;; LSP with Pyright (type checking, completions, navigation, docs)
  (use-package lsp-mode
    :hook ((python-mode . lsp-deferred))
    :commands (lsp lsp-deferred)
    :custom
    (lsp-keymap-prefix "C-c l")
    (lsp-enable-symbol-highlighting t)
    (lsp-prefer-flymake nil)
    (lsp-pyright-auto-import-completions t)
    (lsp-pyright-use-library-code-for-types t))

  (use-package lsp-pyright
    :after lsp-mode
    :straight t
    :hook (python-mode . (lambda ()
                           (require 'lsp-pyright)
                           (lsp-deferred))))

  ;; Completion backend
  (use-package company
    :hook (prog-mode . company-mode)
    :custom
    (company-idle-delay 0.1)
    (company-minimum-prefix-length 1))
  (add-hook 'c++-ts-mode-hook #'company-mode)
  (add-hook 'c-ts-mode-hook #'company-mode)
  (add-hook 'cuda-ts-mode-hook #'company-mode)

  ;; Modern modeline with venv display
  (use-package doom-modeline
    :hook (after-init . doom-modeline-mode)
    :custom
    (doom-modeline-height 15)
    ;; Show Python environment name
    (doom-modeline-python-executable "python")
    (doom-modeline-env-version t)
    (doom-modeline-env-enable-python t))

  ;; Python venv management
  (use-package pyvenv
    :after python
    :config
    (setenv "WORKON_HOME" "~/.virtualenvs")

    ;; Auto-activate venv/.venv if present
    (defun my/auto-activate-venv ()
      "Auto-activate a Python virtual environment if venv or .venv exists."
      (let* ((root (or (locate-dominating-file default-directory "venv")
                       (locate-dominating-file default-directory ".venv")))
             (venv-path (when root
                          (expand-file-name
                           (if (file-exists-p (expand-file-name "venv" root))
                               "venv"
                             ".venv")
                           root))))
        (when (and venv-path (file-directory-p venv-path))
          (pyvenv-activate venv-path)
          (message "Activated venv: %s" venv-path))))

    (add-hook 'python-mode-hook #'my/auto-activate-venv))

  ;; Uv package manager integration (optional, modern replacement for pip/venv/poetry)
  (use-package uv
    :straight (uv :type git :host github :repo "johannes-mueller/uv.el")
    :init
    ;; Needed for parsing pyproject.toml
    (require 'treesit)
    (add-to-list 'treesit-language-source-alist
                 '(toml "https://github.com/tree-sitter-grammars/tree-sitter-toml"))
    (unless (treesit-language-available-p 'toml)
      (treesit-install-language-grammar 'toml)))
#+end_src

* Sane Defaults
#+begin_src emacs-lisp
(delete-selection-mode 1)
(global-auto-revert-mode 1)
(electric-pair-mode 1)
(setq auto-save-list-file-prefix nil)
(setq transient-mark-mode t)
(setq mouse-highlight nil)
(setq enable-local-eval t)
;; Disable backup (tilde) files.
(setq make-backup-files nil)
(setq auto-save-default nil)
;; Always use y or n instead of full "yes" or "no".
(defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

* Recent Files
#+begin_src emacs-lisp
;; Enable recentf-mode so recent files appear.
(use-package recentf
  :init
  (recentf-mode 1)
  (setq recentf-max-menu-items 25))
#+end_src

* Git Integration

#+begin_src emacs-lisp
;; --- Git Workflow Setup ---

;; Magit: the Git porcelain inside Emacs
(use-package magit
  :commands (magit-status magit-blame)
  :bind (("C-x g" . magit-status))
  :config
  (setq magit-display-buffer-function
        #'magit-display-buffer-fullframe-status-v1
        magit-log-section-commit-count 20))

(with-eval-after-load 'magit
  (declare-function magit-blame-quit "magit-blame"))

;; Git Timemachine: step through revisions of a file
(use-package git-timemachine
  :bind (("C-x t" . git-timemachine)))

;; Git Gutter: show diff markers in the fringe
(use-package git-gutter
  :hook (prog-mode . git-gutter-mode)
  :custom
  (git-gutter:modified-sign "~")  ;; modified
  (git-gutter:added-sign    "+")  ;; added
  (git-gutter:deleted-sign  "-")  ;; deleted
  (git-gutter:ask-p nil)          ;; don’t prompt before revert
  :config
  (set-face-foreground 'git-gutter:modified "orange")
  (set-face-foreground 'git-gutter:added    "green")
  (set-face-foreground 'git-gutter:deleted  "red"))

;; Doom modeline already shows branch and VCS info.
(use-package doom-modeline
  :custom
  (doom-modeline-vcs-max-length 20)) ;; limit branch name length
#+end_src

* Dashboard
#+begin_src emacs-lisp
(use-package dashboard
  :init
  (setq initial-buffer-choice 'dashboard-open
        dashboard-center-content t
        ;; Set the banner image to old.png.
        dashboard-startup-banner (expand-file-name "img/mtn_optimized.png" user-emacs-directory)
        ;; Set banner text below the image.
        dashboard-banner-logo-title "No point waiting for dust to settle."
        ;; Disable icons.
        dashboard-set-heading-icons nil
        dashboard-set-file-icons nil
        ;; Exclude tilde files from recentf.
        dashboard-recentf-exclude '(".*~$")
        ;; Display recent files, bookmarks, and registers.
        dashboard-items '((recents . 5)
                          (bookmarks . 3)
                          (registers . 3))
        ;; Set custom footer messages.
        dashboard-footer-messages '(""))
  :config
  (dashboard-setup-startup-hook))
#+end_src

* Navigation Enhancements
#+begin_src emacs-lisp
;; Avy: jump quickly to visible text using a char-based hint
(use-package avy
  :bind (("C-:" . avy-goto-char)       ;; jump to a char
         ("C-'" . avy-goto-char-2)     ;; jump to 2-char sequence
         ("M-g f" . avy-goto-line)     ;; jump to a line
         ("M-g w" . avy-goto-word-1))  ;; jump to a word
  :config
  (setq avy-background t))             ;; dim background while choosing

;; link-hint: like avy, but for clickable things (links, buttons, etc.)
(use-package link-hint
  :bind (("C-c l o" . link-hint-open-link)   ;; open link/button at point
         ("C-c l c" . link-hint-copy-link))) ;; copy link/button target
#+end_src


* Doom Modeline (No Icons)
#+begin_src emacs-lisp
(use-package doom-modeline
  :init
  (doom-modeline-mode 1)
  :custom
  (doom-modeline-height 15)
  ;; Disable icons.
  (doom-modeline-icon nil)
  (doom-modeline-buffer-state-icon nil)
  (doom-modeline-buffer-modification-icon nil))
#+end_src

* Tramp Setup
#+begin_src emacs-lisp
;; Configure Tramp to use SSH and lower verbosity.
(setq tramp-default-method "ssh")
(setq tramp-verbose 1)
#+end_src

* C/C++ Development
#+begin_src emacs-lisp
;; --- C/C++ Development Setup ---

;; 1. LSP Setup for C/C++ using clangd:
(use-package lsp-mode
  :hook ((c-mode c++-mode) . lsp-deferred)  ; Start LSP in C/C++ modes automatically.
  :commands lsp
  :custom
  (lsp-idle-delay 0.5)                      ; Wait 0.5 seconds of inactivity.
  (lsp-clients-clangd-executable "clangd")) ; Ensure clangd is installed and in PATH.

;; 2. Enhanced Syntax Highlighting:
(use-package modern-cpp-font-lock
  :hook (c++-mode . modern-c++-font-lock-mode)
  :config
  (modern-c++-font-lock-mode 1))

;; 3. Snippet Support:
(use-package yasnippet
  :init
  (yas-global-mode 1))
(use-package yasnippet-snippets
  :after yasnippet)

;; 4. CMake Support:
(use-package cmake-font-lock
  :hook (cmake-mode . cmake-font-lock-activate))

(use-package cmake-ide
  :config
  ;; Automatically configure LSP/clangd from CMake projects
  (cmake-ide-setup))

;; 5. Code Formatting with clang-format:
(use-package clang-format
  :bind (("C-c f" . clang-format-buffer)
         ("C-c r" . clang-format-region))
  :hook ((c-mode c++-mode) . (lambda ()
                               (add-hook 'before-save-hook #'clang-format-buffer nil t))))

;; 6. Project Navigation with Projectile:
(use-package projectile
  :init
  (projectile-mode +1)
  :custom
  (projectile-completion-system 'vertico) ;; or 'vertico
  :config
  (setq projectile-project-search-path '("~/cpp_projects"))
  (setq projectile-switch-project-action #'projectile-dired))

;; 7. Which-Key for Keybinding Hints:
(use-package which-key
  :init (which-key-mode 1)
  :config
  (setq which-key-idle-delay 0.5))

;; 8. Buffer-Move for Swapping Buffers Between Windows:
(use-package buffer-move
  :commands (buf-move-up buf-move-down buf-move-left buf-move-right)
  :config
  (setq buffer-move-behavior 'swap))

(add-hook 'c++-ts-mode-hook #'company-mode)
(add-hook 'c-ts-mode-hook   #'company-mode)
#+end_src


* Java Development
#+begin_src emacs-lisp
;; --- Java Development Setup ---
;; Use lsp-java for enhanced Java support. This sets up LSP for Java and enables features
;; such as code completion, error checking, and formatting.

(use-package lsp-java
  :ensure t
  :hook (java-mode . lsp-deferred)
  :config
  (setq lsp-java-save-action-organize-imports t
        ;; Optionally, you can set up a formatting style. For example, the Google Java Style:
        lsp-java-format-settings-url "https://raw.githubusercontent.com/google/styleguide/gh-pages/eclipse-java-google-style.xml"
        lsp-java-format-settings-profile "GoogleStyle"))

;; A simple command to compile and run the current Java file.
(defun run-java-file ()
  "Compile and run the current Java file.
Assumes the file contains a public class with a main method."
  (interactive)
  (let* ((file (buffer-file-name))
         (class (file-name-base file)))
    (if file
        (compile (format "javac %s && java %s"
                         (shell-quote-argument file)
                         (shell-quote-argument class)))
      (message "Buffer is not visiting a file."))))
#+end_src

* Interactive Run Commands
#+begin_src emacs-lisp
;; Function to compile and run the current C++ file.
(defun run-cpp-17 ()
  "Compile and run the current C++ file.
Uses clang++ with -std=c++17 and -O2 optimization.
The executable is created in the same directory with the same base name."
  (interactive)
  (let* ((file (buffer-file-name))
         (exe (concat (file-name-sans-extension file))))
    (if file
        (compile (format "clang++ -std=c++17 -O2 %s -o %s && %s"
                         (shell-quote-argument file)
                         (shell-quote-argument exe)
                         (shell-quote-argument exe)))
      (message "Buffer is not visiting a file."))))

;; Function to run the current Python file using python3.
(defun run-python-file ()
  "Run the current Python file using python3."
  (interactive)
  (let ((file (buffer-file-name)))
    (if file
        (compile (format "python3 %s" (shell-quote-argument file)))
      (message "Buffer is not visiting a file."))))

;; Function to compile CUDA files and run the resulting executable.
(defun run-cuda-files (&optional files)
  "Compile CUDA source files using nvcc and run the executable if compilation succeeds.
If FILES is not provided, default to the current buffer's file.
The executable is created with the same base name and an '.out' extension."
  (interactive)
  (let* ((file-list (if files files (list (buffer-file-name))))
         (first-file (car file-list))
         (exe (concat (file-name-sans-extension first-file) ".out"))
         (cmd (mapconcat 'shell-quote-argument file-list " "))
         (full-cmd (format "nvcc -arch=sm_86 -O3 %s -o %s && %s"
                           cmd
                           (shell-quote-argument exe)
                           (shell-quote-argument exe))))
    (if first-file
        (compile full-cmd)
      (message "No CUDA file available in buffer."))))
#+end_src

* Key Bindings
#+begin_src emacs-lisp
(global-set-key (kbd "C-x C-b") 'ibuffer)
(global-set-key (kbd "C-c r") (lambda () (interactive) (load-file user-init-file)))
;; Zoom in/out commands.
(global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
(global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
;; Single ESC to quit the minibuffer.
(global-set-key [escape] 'keyboard-escape-quit)
#+end_src

* Future Modules
#+begin_src emacs-lisp
;; Command to recursively delete all files ending with a tilde in the current directory.
(defun delete-tilde-files ()
  "Delete all files ending with a tilde in the current directory recursively."
  (interactive)
  (shell-command "find . -type f -name '*~' -delete"))

;; Command to recursively delete all files ending with a tilde from the root directory.
(defun delete-tilde-files-root ()
  "Delete all files ending with a tilde from the root directory recursively.
WARNING: This will delete backup files from the entire filesystem. Use with caution."
  (interactive)
  (shell-command "sudo find / -type f -name '*~' -delete"))
#+end_src
